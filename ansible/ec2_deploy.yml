- name: Deploy to EC2
  hosts: localhost
  connection: local

  tasks:
    - name: Launch EC2 Instance
      ec2_instance:
        instance_type: t2.medium
        image_id: ami-0230bd60aa48260c6
        region: us-east-1
        key_name: test
        vpc_subnet_id: subnet-0dfd81f98f07f572e
        count: 1
        security_group: eshop
        tags:
          Name: eshop
        network:
          assign_public_ip: yes
        wait: yes
        aws_access_key: "{{access_key}}"
        aws_secret_key: "{{secret_key}}"
        security_token: "{{session_token}}"
      register: ec2_instance_result
    
    - name: Add instance host to group
      add_host:
        hostname: "{{item.public_ip_address}}"
        groupname: launched
      loop: "{{ec2_instance_result.instances}}"
    
    - set_fact:
        new_instance_id: "{{ec2_instance_result.instances[0].instance_id}}"

    - name: Wait for SSH connections
      delegate_to: "{{item.public_ip_address}}"
      wait_for_connection:
        delay: 300
        timeout: 500
      loop: "{{ec2_instance_result.instances}}"

- name: Configure EC2
  hosts: launched
  connection: ssh

  tasks:
    - name: Install git
      yum:
        name:
          - git
          - docker
        state: latest
        update_cache: yes
      become: yes
    
    - service:
        name: docker
        state: started
        enabled: yes
      become: yes
    
    - name: Start Docker on startup
      shell: systemctl enable docker
      become: yes
    
    - name: Set rights to Docker
      shell: usermod -a -G docker ec2-user
      become: yes
    
    - name: Get eshop from GIT
      git:
        repo: 'https://github.com/odoubrava/4IT572_docker.git'
        dest: ./app
    
    - name: Builed Docker with eshop
      shell: cd app && docker build -t myeshop:latest .
      become: yes

    - name: Run Docker with eshop
      shell: docker run -p 80:3000 myeshop
      async: 45
      poll: 0
      become: yes

    - wait_for:
        port:
          80

  tasks:
    - name: Get info about existing instances
      amazon.aws.ec2_instance_info:
        aws_access_key: '{{access_key}}'
        aws_secret_key: '{{secret_key}}'
        security_token: '{{session_token}}'
        region: us-east-1
        filters:
          "tag:Name": "eshop"
      register: ec2_instance_info_result

    - name: Terminate old instances
      amazon.aws.ec2_instance:
        instance_ids: '{{item.instance_id}}'
        region: us-east-1
        state: 'absent'
        wait: yes
        aws_access_key: '{{access_key}}'
        aws_secret_key: '{{secret_key}}'
        security_token: '{{session_token}}'
      with_items: '{{ec2_instance_info_result.instances}}'
      when: item.instance_id != new_instance_id